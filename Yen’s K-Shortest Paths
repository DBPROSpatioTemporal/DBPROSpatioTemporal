MATCH (start:Station{name: " + startStation + "}), (end:Station{name: " + endStation + "})
CALL gds.alpha.kShortestPaths.stream({
  nodeQuery: 'MATCH (s:Station) " + filter + " RETURN id(s) as id',
  relationshipQuery: 'MATCH (s: Station)-[r:" + verbindung + "]-(t: Station) RETURN id(s) as source, id(t) as target, r.fahrzeit as cost',
  startNode: start,
  endNode: end,
  k: 100,
  relationshipWeightProperty: 'cost',
  validateRelationships: false
})
YIELD index, nodeIds, costs
RETURN [node IN gds.util.asNodes(nodeIds) | node] AS places,
       costs,
       reduce(acc = 0.0, cost IN costs | acc + cost) AS totalCost


startStation = 'Koeln Hauptbahnhof'
endStation = 'Ostkreuz'

rollstuhl entweder "yes" oder "limited"             -> wheelchairYL = NOT s.rollstuhl = "no" 
rollstuhl nur "yes"                                 -> wheelchairY = s.rollstuhl = "yes" 
rollstuhl sowohl "yes" und "limited", als auch "no" ->

체berdacht entweder "yes" oder "limited"             -> coveredYL = NOT s.ueberdacht = "no" 
체berdacht nur "yes"                                 -> coveredY = s.ueberdacht = "yes" 
체berdacht sowohl "yes" und "limited", als auch "no" ->

verbindung = FERNBAHN oder FERNBAHN|SBAHN|UBAHN oder SBAHN o.채.

WHERE und AND kann auch weggelassen werden

Beispiel:
filter = WHERE NOT s.rollstuhl = "no" AND s.ueberdacht = "yes"
